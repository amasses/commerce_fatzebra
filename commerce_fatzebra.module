<?php

/**
 * @file
 * Provides a Fat Zebra payment method for Drupal Commerce.
 */

// Fat Zebra static constants.
define('COMMERCE_FATZEBRA_TXN_MODE_LIVE', 'live');
define('COMMERCE_FATZEBRA_TXN_MODE_TEST', 'test');
define('COMMERCE_FATZEBRA_GATEWAY_URL_LIVE', 'https://gateway.fatzebra.com.au');
define('COMMERCE_FATZEBRA_GATEWAY_URL_SBOX', 'https://gateway.sandbox.fatzebra.com.au');

/**
 * Implements hook_menu().
 */
function commerce_fatzebra_menu() {
  $items = array();
  // Add a menu item for refunding transactions.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/fz/refund'] = array(
    'title' => 'Refund transaction',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_fatzebra_refund_form', 3, 5),
    'access callback' => 'commerce_fatzebra_refund_access',
    'access arguments' => array(3, 5),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 2,
    'file' => 'includes/commerce_fatzebra.admin.inc',
  );
  return $items;
}

/**
 * Access callback for refunds
 * @param  $order
 * @param  $transaction
 * @return boolean
 */
function commerce_fatzebra_refund_access($order, $transaction) {
  if ($transaction->payment_method != 'commerce_fatzebra' || empty($transaction->remote_id) ||
    !in_array($transaction->status, array(COMMERCE_PAYMENT_STATUS_SUCCESS)) || $transaction->amount <= 0) {
    return FALSE;
  }

  // Allow access if the user can update this transaction.
  return commerce_payment_transaction_access('update', $transaction);
}

/**
 * Implements hook_libraries_info().
 */
function commerce_fatzebra_libraries_info() {
  $libraries = array();

  $libraries['fatzebra_php'] = array(
    'name' => 'Fat Zebra PHP Library',
    'vendor url' => 'https://fatzebra.com.au',
    'download url' => 'https://github.com/fatzebra/PHP-Library',
    'version arguments' => array(
      'file' => 'README.markdown',
      'pattern' => '/Release ([\.\d]+)/',
      'lines' => 4,
    ),
    'files' => array(
      'php' => array(
        'FatZebra.class.php',
        'cacert.pem',
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_fatzebra_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_fatzebra'] = array(
    'title' => t('Fat Zebra Integration'),
    'short_title' => t('Fat Zebra'),
    'display_title' => t('Credit card'),
    'description' => t('Integration with Fat Zebra payment gateway.'),
    'active' => FALSE,
    'callbacks' => array(),
  );

  return $payment_methods;
}

/**
 * Settings form for Fat Zebra payment gateway.
 */
function commerce_fatzebra_settings_form($settings = NULL) {
  $form = array();

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + commerce_fatzebra_settings_form_default_values();

  $form['username'] = array(
    '#type' => 'textfield',
    '#title' => t('Fat Zebra Username'),
    '#description' => t('This is your Fat Zebra account username.'),
    '#default_value' => $settings['username'],
    '#required' => TRUE,
  );

  $form['token'] = array(
    '#type' => 'textfield',
    '#title' => t('Fat Zebra Token'),
    '#description' => t('This is your Fat Zebra account token.'),
    '#default_value' => $settings['token'],
    '#required' => TRUE,
  );

  $form['gateway'] = array(
    '#type' => 'radios',
    '#title' => t('Gateway'),
    '#description' => t("Change to 'Live gateway' when you are ready to use your live Fat Zebra gateway."),
    '#options' => array(
      COMMERCE_FATZEBRA_GATEWAY_URL_LIVE => t('Live gateway'),
      COMMERCE_FATZEBRA_GATEWAY_URL_SBOX => t('Sandbox gateway'),
    ),
    '#default_value' => $settings['gateway'],
  );

  $form['txn_mode'] = array(
    '#type' => 'radios',
    '#title' => t('Transaction mode'),
    '#description' => t("Using 'Test mode' with 'Live gateway' will cause transactions to show on your Fat Zebra dashboard, but not be processed by the bank."),
    '#options' => array(
      COMMERCE_FATZEBRA_TXN_MODE_LIVE => t('Live mode'),
      COMMERCE_FATZEBRA_TXN_MODE_TEST => t('Test mode'),
    ),
    '#default_value' => $settings['txn_mode'],
  );

  $form['retail_decisions'] = array(
    '#type' => 'checkbox',
    '#title' => t('Retail Decisions Fraud Detection'),
    '#description' => t("Send extended purchase data with purchase transactions to FatZebra."),
    '#default_value' => $settings['retail_decisions'],
  );

  return $form;
}

/**
 * Payment method callback: checkout form.
 */
function commerce_fatzebra_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  // Use the default commerce payment credit card form as a base
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  $form = commerce_payment_credit_card_form(array('code' => ''));
  // Add a field for Cardholder's name
  $name = array(
    'name' => array(
      '#title' => "Cardholder's Name",
      '#type' => 'textfield',
      '#required' => TRUE,
    )
  );
  // array_merge to set Cardholder element first
  // Using #weight makes ordering messy for modules extending with hook_form_alter
  $form['credit_card'] = array_merge($name, $form['credit_card']);

  // If Retail Decisions is enabled, add required device detection JS
  // as well as the hidden form element for processing
  if ($payment_method['settings']['retail_decisions']) {

    drupal_add_js("
      var io_bbout_element_id = 'payment_details_device_id';
      var io_enable_rip = true;
      var io_install_flash = false;
      var io_install_stm = false;
      var io_exclude_stm = 12;
    ", 'inline');

    $path = "https://ci-mpsnare.iovation.com/snare.js"; // Dev
    // $path = "https://mpsnare.iesnare.com/snare.js" // Prod
    drupal_add_js($path, 'external');

    $form['credit_card']['device_id'] = array(
      '#type' => 'hidden',
      '#attributes' => array('id' => 'payment_details_device_id')
    );
  }

  return $form;
}

/**
 * Payment method callback: checkout form validation.
 */
function commerce_fatzebra_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  $settings = array(
    'form_parents' => array_merge($form_parents, array('credit_card')),
  );

  if (!commerce_payment_credit_card_validate($pane_values['credit_card'], $settings)) {
    return FALSE;
  }
}

/**
 * Payment method callback: checkout form submission.
 */
function commerce_fatzebra_submit_form_submit($payment_method, $pane_form, $pane_values, &$order, $charge) {

  module_load_include('inc', 'commerce_fatzebra', 'commerce_fatzebra');

  $purchase_request_values = array(
    'amount' => commerce_currency_amount_to_decimal($charge['amount'], $charge['currency_code']),
    'reference' => $order->order_id . "-" . time(),
    'card_holder' => $pane_values['credit_card']['name'],
    'card_number' => preg_replace('/[^\d]/', '', $pane_values['credit_card']['number']),
    'card_expiry' => $pane_values['credit_card']['exp_month'] . "/" . $pane_values['credit_card']['exp_year'],
    'cvv' => $pane_values['credit_card']['code'],
  );

  // Merge settings form default values in case user has never saved settings.
  $payment_method['settings'] = (array) $payment_method['settings'] + commerce_fatzebra_settings_form_default_values();

  // Add information to payload for fraud detection if Retail Decisions has been enabled
  if ($payment_method['settings']['retail_decisions']) {
    $purchase_request_values['fraud'] = commerce_fatzebra_order_red_data($order, $pane_values);
  }

  $purchase_response = commerce_fatzebra_purchase($purchase_request_values, $payment_method['settings']);

  $process_result = commerce_fatzebra_response_process($purchase_response, $order->order_id, $payment_method);

  if ($process_result !== TRUE) {
    drupal_set_message(check_plain($process_result), 'error');
    return FALSE;
  }
}

/**
 * Default values for Fat Zebra payment gateway settings form.
 */
function commerce_fatzebra_settings_form_default_values() {
  return array(
    'username' => 'TEST',
    'token' => 'TEST',
    'gateway' => COMMERCE_FATZEBRA_GATEWAY_URL_SBOX,
    'txn_mode' => COMMERCE_FATZEBRA_TXN_MODE_TEST,
    'retail_decisions' => 0
  );
}
