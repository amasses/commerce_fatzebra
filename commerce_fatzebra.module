<?php

/**
 * @file
 * Provides a Fat Zebra payment method for Drupal Commerce.
 */

// Fat Zebra transaction mode definitions.
define('FATZEBRA_TXN_MODE_LIVE', 'live');
define('FATZEBRA_TXN_MODE_SBOX', 'sbox');
define('FATZEBRA_GATEWAY_URL', 'https://gateway.sandbox.fatzebra.com.au');

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_fatzebra_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_fatzebra'] = array(
    'title' => t('Fat Zebra Integration'),
    'short_title' => t('Fat Zebra'),
    'display_title' => t('Credit card'),
    'description' => t('Integration with Fat Zebra payment gateway.'),
    'active' => FALSE,
    'callbacks' => array(),
  );

  return $payment_methods;
}

/**
 * Settings form for Fat Zebra payment gateway.
 */
function commerce_fatzebra_settings_form($settings = NULL) {
  $form = array();

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + array(
    'username' => 'TEST',
    'token' => 'TEST',
    'txn_mode' => FATZEBRA_TXN_MODE_SBOX,
  );

  $form['username'] = array(
    '#type' => 'textfield',
    '#title' => t('Fat Zebra Username'),
    '#description' => t('This is your Fat Zebra account username.'),
    '#default_value' => $settings['username'],
    '#required' => TRUE,
  );

  $form['token'] = array(
    '#type' => 'textfield',
    '#title' => t('Fat Zebra Token'),
    '#description' => t('This is your Fat Zebra account token.'),
    '#default_value' => $settings['token'],
    '#required' => TRUE,
  );

  $form['txn_mode'] = array(
    '#type' => 'radios',
    '#title' => t('Transaction mode'),
    '#description' => t('Change to \'Live transactions\' when you are ready to start processing real payments.'),
    '#options' => array(
      FATZEBRA_TXN_MODE_LIVE => t('Live transactions'),
      FATZEBRA_TXN_MODE_SBOX => t('Sandbox transactions'),
    ),
    '#default_value' => $settings['txn_mode'],
  );

  return $form;
}

/**
 * Payment method callback: checkout form.
 */
function commerce_fatzebra_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  return commerce_payment_credit_card_form(array('code' => ''));
}

/**
 * Payment method callback: checkout form validation.
 */
function commerce_fatzebra_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  // @STUB: some validation should happen here
}

/**
 * Payment method callback: checkout form submission.
 */
function commerce_fatzebra_submit_form_submit($payment_method, $pane_form, $pane_values, &$order, $charge) {

  module_load_include('inc', 'commerce_fatzebra', 'commerce_fatzebra');

  $purchase_request_values = array(
    'amount' => $charge['amount'] / 100,
    'reference' => $order->order_number . "-" . time(),
    'card_holder' => commerce_fatzebra_get_order_name_line($order),
    'card_number' => preg_replace('/[^\d]/', '', $pane_values['credit_card']['number']),
    'card_expiry' => $pane_values['credit_card']['exp_month'] . "/" . $pane_values['credit_card']['exp_year'],
    'cvv' => $pane_values['credit_card']['code'],
  );

  $purchase_response = commerce_fatzebra_purchase($purchase_request_values, $payment_method['settings']);

  // add the order number so we're still able to log the transaction correctly if there is an API issue
  $purchase_response->order_id = $order->order_number;

  $process_result = commerce_fatzebra_purchase_response_process($purchase_response);

  if ($process_result !== TRUE) {
    drupal_set_message(check_plain($process_result), 'error');
    return FALSE;
  }
}
