<?php

/**
 * @file
 * Provides a Fat Zebra payment method for Drupal Commerce.
 */

// Fat Zebra transaction mode definitions.
define('FATZEBRA_TXN_MODE_LIVE', 'live');
define('FATZEBRA_TXN_MODE_SBOX', 'sbox');
define('FATZEBRA_GATEWAY_URL', 'https://gateway.sandbox.fatzebra.com.au');

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_fatzebra_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_fatzebra'] = array(
    'title' => t('Fat Zebra Integration'),
    'short_title' => t('Fat Zebra'),
    'display_title' => t('Credit card'),
    'description' => t('Integration with Fat Zebra payment gateway.'),
    'active' => FALSE,
    'callbacks' => array(),
  );

  return $payment_methods;
}

/**
 * Settings form for Fat Zebra payment gateway.
 */
function commerce_fatzebra_settings_form($settings = NULL) {
  $form = array();

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + array(
    'username' => 'TEST',
    'token' => 'TEST',
    'txn_mode' => FATZEBRA_TXN_MODE_SBOX,
  );

  $form['username'] = array(
    '#type' => 'textfield',
    '#title' => t('Fat Zebra Username'),
    '#description' => t('This is your Fat Zebra account username.'),
    '#default_value' => $settings['username'],
    '#required' => TRUE,
  );

  $form['token'] = array(
    '#type' => 'textfield',
    '#title' => t('Fat Zebra Token'),
    '#description' => t('This is your Fat Zebra account token.'),
    '#default_value' => $settings['token'],
    '#required' => TRUE,
  );

  $form['txn_mode'] = array(
    '#type' => 'radios',
    '#title' => t('Transaction mode'),
    '#description' => t('Change to \'Live transactions\' when you are ready to start processing real payments.'),
    '#options' => array(
      FATZEBRA_TXN_MODE_LIVE => t('Live transactions'),
      FATZEBRA_TXN_MODE_SBOX => t('Sandbox transactions'),
    ),
    '#default_value' => $settings['txn_mode'],
  );

  return $form;
}

/**
 * Payment method callback: checkout form.
 */
function commerce_fatzebra_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  return commerce_payment_credit_card_form(array('code' => ''));
}

/**
 * Payment method callback: checkout form validation.
 */
function commerce_fatzebra_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  // @STUB: some validation should happen here
}

/**
 * Payment method callback: checkout form submission.
 */
function commerce_fatzebra_submit_form_submit($payment_method, $pane_form, $pane_values, &$order, $charge) {
  // dpm(func_get_args());
  $purchase_request_values = array(
    'amount' => $charge['amount'] / 100,
    'reference' => $order->order_number . "-" . time(),
    'card_holder' => _commerce_fatzebra_get_order_name_line($order),
    'card_number' => preg_replace('/[^\d]/','',$pane_values['credit_card']['number']),
    'card_expiry' => $pane_values['credit_card']['exp_month'] . "/" . $pane_values['credit_card']['exp_year'],
    'cvv' => $pane_values['credit_card']['code'],
  );

  $purchase_response = _commerce_fatzebra_purchase($purchase_request_values, $payment_method['settings']);

  // add the order number so we're still able to log the transaction correctly if there is an API issue
  $purchase_response->order_id = $order->order_number;

  _commerce_fatzebra_purchase_response_process($purchase_response);
}

/**
 * Makes a purchase request and returns a Fat Zebra purchase request response object
 * @DOCUMENTATION should specify required keys in request_values
 */
function _commerce_fatzebra_purchase($request_values, $settings) {

  module_load_include('php', 'commerce_fatzebra', 'fatzebra_php/FatZebra.class');

  $purchase_request = new FatZebra\PurchaseRequest(
    $request_values['amount'],
    $request_values['reference'],
    $request_values['card_holder'],
    $request_values['card_number'],
    $request_values['card_expiry'],
    $request_values['cvv']
  );

  // for any non-live setting, use true (test mode)
  $transaction_mode = ($settings['txn_mode'] == FATZEBRA_TXN_MODE_LIVE) ? false : true ;

  $gw = new FatZebra\Gateway(
    $settings['username'],
    $settings['token'],
    $transaction_mode,
    FATZEBRA_GATEWAY_URL
  );
  $gw->timeout = 30;
  return $gw->purchase($purchase_request);
}

function _commerce_fatzebra_purchase_response_process($response) {

  // dpm($response);

  $transaction = commerce_payment_transaction_new('commerce_fatzebra', $response->order_id);
  $transaction->message_variables = array();
  // Set the transaction message and tokens that will be recorded as a transaction against this order
  $transaction->message = 'Transaction @status: @statusdetail.';

  // Set the transaction status and status text based on response success values
  if ($response->successful && $response->response->successful) {
    $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
    $transaction->message_variables['@status'] = 'success';
  } else {
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
    $transaction->message_variables['@status'] = 'failed';
  }

  if ($response->successful === false) {
    // We have an API error
    $transaction->message_variables['@statusdetail'] = implode(', ', $response->errors);
  } else {
    // API call was successful, so $response->response will be populated
    $transaction->message_variables['@statusdetail'] = $response->response->message;

    $transaction->amount = $response->response->amount;
    $transaction->currency_code = $response->response->currency;
    $transaction->remote_id = $response->response->reference;

    // Set the transaction message and tokens that will be recorded as a transaction against this order
    $transaction->message .= ' Card: @cardnumber';
    $transaction->message_variables['@cardnumber'] = $response->response->card_number;
  }

  // dpm($transaction);

  commerce_payment_transaction_save($transaction);
}

/**
 * Given an order, returns the order's profile's name_line value
 */
function _commerce_fatzebra_get_order_name_line($order) {
  $customer_profile = commerce_customer_profile_load($order->commerce_customer_billing['und'][0]['profile_id']);
  return $customer_profile->commerce_customer_address['und'][0]['name_line'];
}
